<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Daniel Standage</title><link href="https://standage.github.io/" rel="alternate"></link><link href="https://standage.github.io/feeds/blog.atom.xml" rel="self"></link><id>https://standage.github.io/</id><updated>2016-09-08T00:00:00-04:00</updated><entry><title>An idiot's guide to loading reads from a BAM file</title><link href="https://standage.github.io/an-idiots-guide-to-loading-reads-from-a-bam-file.html" rel="alternate"></link><published>2016-09-08T00:00:00-04:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-09-08:an-idiots-guide-to-loading-reads-from-a-bam-file.html</id><summary type="html">&lt;p&gt;tl;dr? It's fine, just ignore secondary/supplementary alignments and don't disable reporting of unaligned reads.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I recently started my first &lt;em&gt;real&lt;/em&gt; foray into human genomics, and if I thought I was overwhelmed with data before, I'm much more so now.
(Thank goodness I'm not &lt;strike&gt;stupid&lt;/strike&gt; ambitious enough to work on marine or soil metagenomics!)
One challenge I've encountered already is that this field seems to be moving toward BAM files&lt;sup&gt;1&lt;/sup&gt; for distributing not only read alignments against a reference genome but also the original read sequences themselves.
I have a passing familiarity with SAM/BAM files, but (barring a few exceptions) I've always treated them as a black box before, using "trusted" tools to create and process them.
Now that I'm faced with the prospect of writing software to take them as input, I've really had to bite the bullet and dig into the nitty gritty.&lt;/p&gt;
&lt;h2&gt;BAM is the new Fastq&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/FASTQ_format"&gt;Fastq format&lt;/a&gt; has long been the standard for storing nucleotide sequence reads from genome-scale sequencing platforms such as Illumina.
Although it is riddled with the &lt;a href="https://www.biostars.org/p/7126/#7136"&gt;same issues as essentially every other bioinformatics data format&lt;/a&gt;—a redundant and incomplete spec (&lt;em&gt;What *is* the purpose of the third line? Can the sequence be split across multiple lines?&lt;/em&gt;) and inconsistent usage (&lt;em&gt;Which quality encoding was used? Are pairs interleaved or split into different files?&lt;/em&gt;)—the Fastq format's stripped-down simplicity is no doubt a big factor in its wide adoption.
On the other hand, the &lt;a href="https://en.wikipedia.org/wiki/SAM_(file_format)"&gt;SAM format&lt;/a&gt; was designed for storing read alignments against a reference, with BAM as its compressed binary counterpart.
When it comes to analyzing the raw reads produced by a sequencer, Fastq is everybody's natural first choice.&lt;/p&gt;
&lt;p&gt;The scale of human genomics data collection is proving challenging, however.
When a single modest-coverage sample requires on the order of 100 GB for storage, and you're sequencing thousands of samples, you don't want to store duplicates of your data.
And since the majority of scientists in the field are only interested in the alignments anyway, it makes much more sense to publish and archive only BAM files rather than only Fastq files.&lt;/p&gt;
&lt;h2&gt;But what if I just want the reads?&lt;/h2&gt;
&lt;p&gt;So the big question then is: if I'm not interested in the alignments and only want the original read sequences, can I get these from the BAM file?
Those more familiar with SAM/BAM could probably have given an immediate answer, but as a relative n00b I had several questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the sequence reported in the BAM file the read sequence, the reference sequence, or an alignment artifact (like a consensus)?&lt;/li&gt;
&lt;li&gt;Do BAM files include unmapped reads?&lt;/li&gt;
&lt;li&gt;Are multi-mapped reads reported multiple times?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, is it possible to extract all input read sequences non-redundantly from a BAM file?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(I should note at this point that I wasn't &lt;strong&gt;completely&lt;/strong&gt; unaware that BAM-to-Fastq converters exist&lt;sup&gt;2&lt;/sup&gt;, so I probably should have approached this question with a bit more confidence.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Some probing&lt;/h2&gt;
&lt;p&gt;To satisfy my curiousity, I did a bit of detective work on the BAM files I'm analyzing in my current project.
Since the files are huge (&amp;gt;100GB per) and stored on a busy cluster, I selected only the first 5 million-ish reads from the file for testing (processing the whole file would have required submitting a job request to the queue).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;samtools view -h mysample.bam \
    | head -n 5000000 \
    | samtools view -b -o mysample.1st5mil.bam
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking whether the file contains unmapped reads is quite simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;samtools view -f 4 -c mysample.1st5mil.bam
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking whether multimapped reads are reported multiple times took a bit more command-line fu.
The following command cuts out the read ID from each alignment, sorts, reports the counts of each uniq read ID, sorts again by counts, and then reports the top 10 reads by count.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;samtools view mysample.1st5mil.bam \
    | cut -f 1 \
    | sort \
    | uniq -c \
    | sort -rn \
    | head -n 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All of the top 10 read IDs occurred four times in the input.
I suspected that two times would simply mean both the read and its pair were found, but four times means that both the read and its pair were each reported twice.
To confirm, I searched the file for several of the duplicated read IDs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;samtools view mysample.1st5mil.bam | grep ReadIdHere
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sure enough, in each case, both of the read pairs were reported once in full, and a second time as a hard-clipped secondary alignment (256 or 0x100 in the bitwise flag).
The SAM specification is a bit sparse on when hard and soft clipping are intended to be used, but the point is moot since these are marked as secondary alignments.&lt;/p&gt;
&lt;p&gt;I then used the following commands to ensure that all hard-clipped alignments are marked as secondary (and that all secondary alignments are hard-clipped).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;samtools view -f 256 -c mysample.1st5mil.bam
samtools view -f 256 mysample.1st5mil.bam | cut -f 6 | grep -c H
samtools view -F 256 mysample.1st5mil.bam | cut -f 6 | grep -c H
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good.
The only point remaining is to verify that the sequences in the BAM file actually correspond to the read and not the reference or some kind of alignment consensus.
Without access to the original reads, I could only refer back to the SAM specification, which describes the 10th column of an alignment record as the "segment sequence".
Elsewhere in the SAM spec, it is said a read may be composed of multiple segments, so for primary alignments I think we're safe in saying the reported sequence is the entire original read sequence.&lt;/p&gt;
&lt;h2&gt;A little test&lt;/h2&gt;
&lt;p&gt;Based on this detective work, it looks like BAM files do indeed contain the information we need to pull out the original read sequence.&lt;sup&gt;3&lt;/sup&gt;
On one hand, it's not too surprising: this kind of thing has likely come up as authors of the SAM spec and mapping software refined their tools over time.
On the other hand, I couldn't shake the feeling that, as a newcomer, there might be some problematic detail that I've missed.
I concluded that the only way to ease my unsettled mind was to do a test where I knew the (Fastq) input, and could verify that the (BAM) output had exactly the information I needed.&lt;/p&gt;
&lt;p&gt;Here is the basic outline of the test.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grab a couple of chromosomes from the human reference genome (commands not shown)&lt;/li&gt;
&lt;li&gt;grab a small sample (≈1 million reads) from a Fastq file I have access to (commands not shown)&lt;/li&gt;
&lt;li&gt;index the reference sequence for mapping&lt;/li&gt;
&lt;li&gt;map the reads to the reference, produce BAM file&lt;/li&gt;
&lt;li&gt;extract read sequences from the BAM file, compare to contents of Fastq file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to test both BWA and Bowtie2 with default settings, figuring that &amp;gt;95% of human genome stuff is going to involve data mapped by of these two tools.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bwa index hg.fasta
bwa mem -t 4 hg.fasta reads-subset.fastq | samtools view b -o test.bwa.bam

bowtie2-build hg.fasta hg.fasta.bt2
bowtie2 -p 4 -x hg.fasta.bt2 -U reads-subset.fastq | samtools view -b -o test.bt2.bam
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's extract all of the sequences corresponding to primary alignments—not marked as secondary (256 or 0x100) or supplementary (2048 or 0x800)—from each BAM file.
If we sort the sequences, they should be identical right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 2048 + 256 = 2304
samtools -F 2304 test.bwa.bam \
    | cut -f 10 \
    | sort \
    &amp;gt; test.bwa.seq.txt
samtools -F 2304 test.bt2.bam \
    | cut -f 10 \
    | sort \
    &amp;gt; test.bt2.seq.txt
diff -q test.bwa.seq.txt test.bt2.seq.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ruh, roh!
It looks like they're not the same!
What's going on?
Both files contain exactly 1,000,000 lines, as expected.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wc -l test.bwa.seq.txt test.bt2.seq.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How many are shared between them?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;comm -12 test.bwa.seq.txt test.bt2.seq.txt | wc -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It looks like only about 84% are shared in this case.
After a bit more investigation, I discovered that in some cases the mapper will report the reverse complement of the read sequence instead of the original read sequence.
This of course is not at all problematic for BAM paring in general, but it complicated my rudimentary evaluation using the &lt;code&gt;diff&lt;/code&gt; command.
To this end, I wrote a simple C++ program that would print out each sequence it was given &lt;em&gt;as well as its reverse complement&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nf"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;T&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;T&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;C&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;G&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;G&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;C&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;revcomp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;revcomp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rbegin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rend&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;revcomp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;revcomp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;revcomp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;revcomp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now use this to confirm that the ≈16% of sequences that don't match between BWA and Bowtie are simply reverse complements of each other.
If we compile this program and re-run the pipeline with it included, we should get identical output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++ -Wall -O3 --std=c++11 -o rc rc.cpp
samtools -F 2304 test.bwa.bam \
    | cut -f 10 \
    | ./rc \
    | sort \
    &amp;gt; test.bwa.seq.txt
samtools -F 2304 test.bt2.bam \
    | cut -f 10 \
    | ./rc \
    | sort \
    &amp;gt; test.bt2.seq.txt
diff -q test.bwa.seq.txt test.bt2.seq.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Woohoo, success!
Of course, this only checks that the mappers give identical results.
What we're &lt;em&gt;really&lt;/em&gt; interested in is whether they both match the contents of the original Fastq file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;paste - - - - &amp;lt; reads-subset.fastq \
    | cut -f 2 \
    | ./rc \
    | sort \
    &amp;gt; test.fastq.seq.txt
diff -q test.fastq.seq.txt test.bwa.seq.txt
diff -q test.fastq.seq.txt test.bt2.seq.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is indeed a match, and I think I can confidently mark this case closed.&lt;/p&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;I &lt;em&gt;did&lt;/em&gt; warn you in the title that this was an idiot's guide, right?
A lot of this is probably very elementary stuff to guys and gals that work with mappers and BAM file internals on a daily basis.
Even so, I hope I've demonstrated clearly and comprehensively that even if you're interested only in the original read sequence, BAM files are a suitable data format.
Of course...there are some caveats:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Caveats" src="https://standage.github.io/images/genie.gif" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some mappers give you the option to not report unmapped reads.
  Enabling these settings is problematic if the Fastq files are not published alongside the BAM files.&lt;/li&gt;
&lt;li&gt;Some mappers may behave differently than the two I evaluated, which (although unlikely) might render some points of my assessment invalid.&lt;/li&gt;
&lt;li&gt;Performing quality control prior to mapping is convenient for those using the alignments, but prevents users from ever going back and applying a different (improved?) quality control procedure&lt;sup&gt;4&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other than that, it looks like you're just fine grabbing the segment sequence from each alignment except those marked as secondary or supplementary.&lt;/p&gt;
&lt;p&gt;But let me open this up: is there anything I've missed, any potential pitfalls that I've overlooked?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A big thanks to Carrie Ganote, Ali Berens, Titus Brown, and Fereydoun Hormozdiari for discussions on the topic and feedback on a draft of this blog post.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;Or, in the longer term, CRAM files, which are different but supposedly backwards compatible with BAM.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;a href="http://seqanswers.com/forums/showthread.php?t=7061"&gt;This thread&lt;/a&gt; on SEQanswers discusses a variety of BAM-to-Fastq converters that exist or have existed.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt;I haven't discussed pairing information since it's not important for the current analysis I'm doing, but it should also be simple to extract by examining the read ID and bitwise flag(s) related to pairing.
Of course, things are rarely as simple in practice as they are conceptually...&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt;This is actually a very important discussion, and where the publishing-BAM-only approach becomes tricky.
When do we handle adapter trimming? Removal of technical duplicates? Quality trimming (if any)?
Wouldn't we want to apply some quality control before mapping the reads?
But then again, quality control on reads is not a settled science, and publishing BAM files of cleaned-up reads prevents us from applying improved QC in the future.
I'm not sure I have a good answer for this, but it's an important conversation.&lt;/p&gt;</summary><category term="mapping"></category><category term="bam"></category></entry><entry><title>Reproducible variant calling is possible with randomized algorithms</title><link href="https://standage.github.io/reproducible-variant-calling-is-possible-with-randomized-algorithms.html" rel="alternate"></link><published>2016-08-22T00:00:00-04:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-08-22:reproducible-variant-calling-is-possible-with-randomized-algorithms.html</id><summary type="html">&lt;p&gt;This morning I read &lt;a href="http://dx.doi.org/10.1093/bioinformatics/btw139"&gt;On genomic repeats and reproducibility&lt;/a&gt; by Can Firtina and Can Alkan.
The paper discusses two notable observations regarding calling genomic variants.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Some sequence read aligners are not deterministic, and shuffling the order of the reads can result in different alignments.&lt;/li&gt;
&lt;li&gt;Some variant callers are not deterministic, and will report a different set of variants if an analysis is repeated on the same set of alignments (i.e. the same BAM file).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Non-deterministic read mapping&lt;/h2&gt;
&lt;p&gt;The first observation wasn't all that surprising to me.
I remember as a graduate student hearing anecdotally that genome assembly algorithms are (or can be) sensitive to read order.
And anything that involves pseudorandom number generators will by definition produce results with technical variation.&lt;/p&gt;
&lt;p&gt;The authors analyzed four read alignment tools: Bowtie2, RazerS3, mrFAST, and BWA-MEM.
Based on a sample of 1 million reads, they confirmed that Bowtie2&lt;sup&gt;‡&lt;/sup&gt; and mrFAST produce identical alignments when the read order is shuffled.
BWA-MEM, however, reports multimapped reads differently, and the location reported for each multimapped read depends on its order.
Oddly enough, the the authors didn't report RazerS3 results for this analysis, although in the discussion section they describe RazerS3 as a deterministic mapper.&lt;/p&gt;
&lt;h2&gt;Non-deterministic variant calling&lt;/h2&gt;
&lt;p&gt;The second observation was quite intriguing to me.
The authors evaluated four variant callers—HaplotypeCaller, Freebayes, Platypus, and SAMtools—and reported the extent to which differences in read alignments due to read order affect variant calling.
More interestingly, though, was the observation that HaplotypeCaller would produce different results when run multiple times on the same input file.
Apparently, HaplotypeCaller uses a random sampling of the training data for sake of efficiency, and different random samples will result in different variants being filtered out by quality control before final results are reported.&lt;/p&gt;
&lt;h2&gt;Discussion and recommendations&lt;/h2&gt;
&lt;p&gt;In the discussion section, the authors recommend using a deterministic read mapper and variant caller for sake of reproducibility.
However, I want to contend with their claim that &lt;em&gt;Full reproducibility could only be achieved through using deterministic methods.&lt;/em&gt;
The behavior of random number generators can be controlled by initializing the generator with a "seed" (see &lt;a href="https://biowize.wordpress.com/2015/08/05/reproducible-software-behavior-with-random-seeds/"&gt;this post from my old blog&lt;/a&gt;), and I think I'm safe in saying that random seeds are general knowledge.
Somebody with enough technical chops to implement a read aligner will almost certainly be familiar with random seeds.
Therefore, a randomized algorithm can indeed be fully reproducible if the following conditions are met.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The algorithm allows (but does not necessarily require) the user to specify a seed to initialize the random number generator.&lt;/li&gt;
&lt;li&gt;The algorithm reports the seed used to initialize the random number generator, whether specified by the user or not.&lt;/li&gt;
&lt;li&gt;The random seed(s) used for an analysis are disclosed whenever results are published or shared.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, BWA-MEM does not allow users to specify random seeds, so the authors are correct &lt;em&gt;in this case&lt;/em&gt; that full reproducibility is not possible with the aligner (I'm not familiar with HaplotypeCaller, so I won't comment on that).
However, the authors themselves admit that in general "randomized algorithms may achieve better accuracy in practice."
So rather than recommending that fellow scientists avoid a tool or class of tools entirely for the sake of reproducibility, I contend that we should recommend that randomized algorithms follow these simple steps to facilitate complete reproducibility.
Perhaps I'll even open a pull request for BWA-MEM myself, although with 30 open pull requests I don't have faith it would be merged any time soon.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;sup&gt;‡&lt;/sup&gt;The authors reported anecdotal evidence, almost as an afterthought, that changing read names will affect the results reported by Bowtie2, even if changing the read order does not.&lt;/p&gt;</summary><category term="random"></category><category term="variant calling"></category></entry><entry><title>That darn cache! Configuring the SRA Toolkit</title><link href="https://standage.github.io/that-darn-cache-configuring-the-sra-toolkit.html" rel="alternate"></link><published>2016-05-18T00:00:00-04:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-05-18:that-darn-cache-configuring-the-sra-toolkit.html</id><summary type="html">&lt;p&gt;Last night I started a batch job on our group's cluster to download and process 9 Illumina libraries from the &lt;a href="https://www.ncbi.nlm.nih.gov/sra"&gt;NCBI SRA&lt;/a&gt;.
In the past, I have almost always downloaded such data via direct links to &lt;code&gt;.sra&lt;/code&gt; files on the SRA FTP site, and then converted these files to Fastq format using the &lt;code&gt;fastq-dump&lt;/code&gt; command from the &lt;a href="https://www.ncbi.nlm.nih.gov/Traces/sra/?view=software"&gt;SRA Toolkit&lt;/a&gt;.
However, for a while I've been aware that the &lt;code&gt;fastq-dump&lt;/code&gt; command is capable of downloading data (by accession) directly from NCBI.
So last night, I took advantage of this convenience function.&lt;/p&gt;
&lt;p&gt;This morning, I woke up to a barrage of warnings on the cluster saying that their was not disk space left.
&lt;em&gt;Impossible&lt;/em&gt;, I thought, &lt;em&gt;there are terabytes of free space on the scratch mount.&lt;/em&gt;
It was not the scratch partition that had filled up though, it was the &lt;code&gt;$HOME&lt;/code&gt; partition.
I'm lucky I was even able to log on to the machine.
What the heck is going on?!?!&lt;/p&gt;
&lt;p&gt;It turns out that by default, &lt;code&gt;fastq-dump&lt;/code&gt; doesn't actually stream &lt;code&gt;.sra&lt;/code&gt; files from the FTP site.
Instead, it downloads intermediate cache files, which by default are stored in &lt;code&gt;~/ncbi/sra/&lt;/code&gt;.
This is a huge issue for several reasons.
First of all, this behavior is not &lt;em&gt;at all&lt;/em&gt; obvious to a new user.
Sure, there may be use cases where this behavior is very useful, but it seems much more appropriate as an &lt;em&gt;opt-in&lt;/em&gt; feature than a default.
Secondly, this is bound to create problems for cluster/HPC users all over the place that have very limited storage in their &lt;code&gt;$HOME&lt;/code&gt; directories.&lt;/p&gt;
&lt;p&gt;Fortunately, the SRA Toolkit allows you to configure this behavior.
The &lt;a href="https://github.com/ncbi/sra-tools/wiki/Toolkit-Configuration"&gt;officially-sanctioned approach&lt;/a&gt; is to fire up a config program, which will allow you to disable caching behavior and/or remote network access of any kind.
The unofficial unsanctioned approach would be to make the config file yourself with a couple of shell commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.ncbi
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/repository/user/main/public/root = &amp;quot;/scratch/standage/sra-cache&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt; ~/.ncbi/user-settings.mkfg
&lt;span class="c1"&gt;# Uncomment the next command if you want to disable network access altogether&lt;/span&gt;
&lt;span class="c1"&gt;# echo &amp;#39;/repository/user/cache-disabled = &amp;quot;true&amp;quot;&amp;#39; &amp;gt; ~/.ncbi/user-settings.mkfg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="sra"></category><category term="ngs"></category></entry><entry><title>The eduroam network and 802.1X profiles in Mac OS X</title><link href="https://standage.github.io/the-eduroam-network-and-8021x-profiles-in-mac-os-x.html" rel="alternate"></link><published>2016-05-18T00:00:00-04:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-05-18:the-eduroam-network-and-8021x-profiles-in-mac-os-x.html</id><summary type="html">&lt;p&gt;My affiliation recently changed from Indiana University to UC Davis, and accordingly my IU credentials no longer give me access to the eduroam wifi network.
Over the last couple of days I've been struggling to connect my laptop to eduroam using my new UC Davis credentials.
At first I thought the it was an issue with my account, but it turns out it was simply an issue with a profile saved on the system.&lt;/p&gt;
&lt;p&gt;When I first connected to eduroam with my IU credentials on my MacBook Pro several years ago, it stored a "profile" on the system.
On my phone, "forgetting" the eduroam network was sufficient for deleting this profile, but on the laptop, disconnecting or "forgetting" the network didn't solve the issue.
With a bit of searching, I was able to find the profile in the &lt;code&gt;Network&lt;/code&gt; section of &lt;code&gt;System Preferences&lt;/code&gt;, but this provided no way to remove the profile (as had been suggested on several forums for older versions of OS X)!&lt;/p&gt;
&lt;p&gt;Finally, I was able to find the profile in a different subsection of the &lt;code&gt;System Preferences&lt;/code&gt; (aptly named &lt;code&gt;Profiles&lt;/code&gt;, go figure), and there was able to delete the profile.
I was then able to connect to the eduroam network, provide my UC Davis credentials, and successfully connect.
It doesn't look like UC Davis stored a profile on the system, so hopefully I don't have to deal with this issue again!&lt;/p&gt;</summary><category term="networking"></category><category term="mac"></category></entry><entry><title>Citing "manuscripts in progress" on your CV</title><link href="https://standage.github.io/citing-manuscripts-in-progress-on-your-cv.html" rel="alternate"></link><published>2016-02-26T10:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-02-26:citing-manuscripts-in-progress-on-your-cv.html</id><summary type="html">&lt;p&gt;A couple of weeks ago, I saw a couple of Twitter threads explode on the topic of citing "manuscripts in progress" on one's CV.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;OK I just saw an application that listed a prestigious journal name for a paper that is IN PREPARATION. Not even submitted. &lt;a href="https://twitter.com/hashtag/stopthemadness?src=hash"&gt;#stopthemadness&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael Hoffman (@michaelhoffman) &lt;a href="https://twitter.com/michaelhoffman/status/696758391239221248"&gt;February 8, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Postdoc applicants - seriously, don&amp;#39;t do this: &lt;a href="https://t.co/o0d3x5rSTT"&gt;https://t.co/o0d3x5rSTT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Daniel MacArthur (@dgmacarthur) &lt;a href="https://twitter.com/dgmacarthur/status/696892638721474560"&gt;February 9, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I include a retweet along with the original tweet, since the discussion on both threads is informative.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There seems to be a pretty wide consensus among academics (at least those on Twitter) that listing publications &lt;em&gt;in progress&lt;/em&gt; with a journal name is pretty pretentious and is likely to do more harm than good.
Of course all of this depends on context.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An undergrad applying for a Master's or Ph.D. program would be treated differently than a Ph.D. student applying for a postdoc, or a postdoc applying for a faculty position.&lt;/li&gt;
&lt;li&gt;If the CV has several solid publications and only one or two listed as &lt;em&gt;in progress&lt;/em&gt;, it would be treated differently than a CV with 1 (or 0) actual publications and several &lt;em&gt;in progress&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So should you list &lt;em&gt;in progress&lt;/em&gt; manuscripts/projects on your CV?
Despite all the pitchfork brandishing that accompanied these Twitter threads, I'm actually of the opinion that this is an honest and acceptable way to present your scholarship, with a few caveats.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Don't list the journal name!&lt;/strong&gt;
  I completely agree that listing a specific journal along with an &lt;em&gt;in prep&lt;/em&gt; paper is ridiculous and pretentious.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clearly list the manuscript as &lt;em&gt;in preparation&lt;/em&gt;!&lt;/strong&gt;
  Not everyone looks kindly on listing &lt;em&gt;in prep&lt;/em&gt; manuscripts on your CV, and you don't want anyone to think you are being dishonest about your scholarship.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only list papers that are soon to be submitted!&lt;/strong&gt;
  If your paper is a long way from submission, listing it as &lt;em&gt;in prep&lt;/em&gt; is little more than wishful thinking.
  This isn't really being honest with yourself or with others, and it would be ridiculous to have to &lt;em&gt;remove&lt;/em&gt; an item from your CV later on because life intervened and you were never able to complete a project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consider your academic status!&lt;/strong&gt;
  As you advance in your career, the need to list &lt;em&gt;in prep&lt;/em&gt; manuscripts on your CV should rapidly dissolve.
  People will be understanding if you're applying for grad school, but you have to be much more careful when finishing grad school and applying for postdocs.
  By the time you're applying for faculty positions your publication record should &lt;em&gt;really&lt;/em&gt; be strong enough to stand on its own without padding from &lt;em&gt;in prep&lt;/em&gt; manuscripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My suggestion is that early career scientists may want to replace the &lt;strong&gt;Publications&lt;/strong&gt; section of their CV with a more general &lt;strong&gt;Scholarship&lt;/strong&gt; section, with subsections for &lt;strong&gt;Publications&lt;/strong&gt;, &lt;strong&gt;Posters&lt;/strong&gt;, and &lt;strong&gt;Oral Presentations&lt;/strong&gt;.
The &lt;strong&gt;Publications&lt;/strong&gt; subsection would be strictly for actual published papers and accepted in-press papers (and &lt;em&gt;maybe&lt;/em&gt; submitted papers, with discretion).
For substantial projects that have not yet been published, hopefully you've had a chance to present that work to your academic colleagues at a research conference.
In that case, list poster and oral presentations, along with the conference name and details, in the relevant subsection(s).
The end of one of these entries, in my opinion, would be the place to list an unfinished paper as &lt;em&gt;in preparation&lt;/em&gt;, subject to the same caveats listed above.&lt;/p&gt;
&lt;p&gt;What to you think?&lt;/p&gt;</summary><category term="science"></category><category term="publication"></category></entry><entry><title>Searching for TSA master records at NCBI</title><link href="https://standage.github.io/searching-for-tsa-master-records-at-ncbi.html" rel="alternate"></link><published>2016-02-19T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-02-19:searching-for-tsa-master-records-at-ncbi.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.ncbi.nlm.nih.gov/genbank/tsa"&gt;NCBI Transcript Shotgun Assembly database&lt;/a&gt; is the go-to place for submitting transcript assemblies for long-term archival and public access.
However, &lt;code&gt;TSA&lt;/code&gt; is not one of the database options provided when doing keyword searches at NCBI.
TSA sequences are available through the &lt;code&gt;nuccore&lt;/code&gt; nucleotide database, along with all other DNA and RNA sequences.&lt;/p&gt;
&lt;p&gt;If you want to search NCBI exclusively for TSA records, include &lt;code&gt;tsa-master[prop]&lt;/code&gt; in your query.
For example, if you want to look for TSA records for the wasp &lt;em&gt;Polistes metricus&lt;/em&gt;, select the &lt;code&gt;Nucleotide&lt;/code&gt; database and use the query &lt;code&gt;tsa-master[prop] AND "Polistes metricus"[Organism]&lt;/code&gt;.
Similarly, the query &lt;code&gt;tsa-master[prop] AND Polistes[Organism]&lt;/code&gt; will search the entire genus.
The final entry of each TSA master record is a &lt;code&gt;TSA&lt;/code&gt; attribute, with a link to download the sequences in compressed Fasta format.&lt;/p&gt;</summary><category term="ncbi"></category><category term="sequences"></category></entry><entry><title>On genomic interval notation</title><link href="https://standage.github.io/on-genomic-interval-notation.html" rel="alternate"></link><published>2016-02-11T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-02-11:on-genomic-interval-notation.html</id><summary type="html">&lt;p&gt;Intervals are one of the most common data abstractions used in genome informatics, along with strings and graphs.
DNA has an intricate dynamic three-dimensional structure, but for many bioinformatics applications we can get away with ignoring this level of detail and representing the molecule instead as a static linear sequence of symbols.
Genomic features—such as genes or transposable elements—are then annotated as subsequences of the larger complete sequence, much like an interval on a discrete number line.&lt;/p&gt;
&lt;p&gt;The most popular data formats for encoding sequence annotations (&lt;a href="http://www.sequenceontology.org/gff3.shtml"&gt;GFF3&lt;/a&gt;, &lt;a href="https://genome.ucsc.edu/FAQ/FAQformat.html#format1"&gt;BED&lt;/a&gt;, &lt;a href="http://mblab.wustl.edu/GTF22.html"&gt;GTF&lt;/a&gt;) all use a very similar convention.
The location of a feature is designated by three values: some kind of &lt;em&gt;label&lt;/em&gt; or &lt;em&gt;identifier&lt;/em&gt; specifying the precise molecule on which the feature resides (such as &lt;em&gt;Chr1&lt;/em&gt; or &lt;em&gt;Scaff17468&lt;/em&gt;), and two integers representing the start and end positions of the feature on that molecule.
These values are stored in tab-delimited plain text, along with various other values and metadata.&lt;/p&gt;
&lt;p&gt;There are, however, some substantial differences between "the big three" formats.
BED and GTF were designed for very specific use cases (visualization and gene prediction, respectively), whereas GFF3 was designed as a generalized solution for genome annotation.
BED allows for a single level of feature decomposition (a feature can be broken up into blocks) and GTF supports two levels (exons can be grouped by &lt;code&gt;transcript_id&lt;/code&gt;, and transcripts grouped by &lt;code&gt;gene_id&lt;/code&gt;), while GFF3 supports an arbitrary number of levels (parent/child relationships defined by &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;Parent&lt;/code&gt; attributes specify a directed acyclic graph of features).&lt;/p&gt;
&lt;p&gt;Perhaps the most important difference is the &lt;em&gt;notation&lt;/em&gt; these formats use to encode genomic intervals: that is, which two integers are used to specify the location of the interval?
GFF3 and GTF both inherited, through their common heritage with older GFF variants, 1-based indexing and closed interval notation.
BED on the other hand uses 0-based indexing and &lt;em&gt;half-closed&lt;/em&gt; interval notation.
Consider the DNA sequence below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        1    2    3    4    5    6    7      &amp;lt;-- GFF3 style
        |    |    |    |    |    |    |
        G    A    T    T    A    C    A
        |    |    |    |    |    |    |
        0    1    2    3    4    5    6      &amp;lt;-- BED style
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using 1-based indexing and closed interval notation &lt;em&gt;a la&lt;/em&gt; GFF3, the interval containing the subsequence &lt;code&gt;ATTA&lt;/code&gt; would be represented as &lt;code&gt;[2, 5]&lt;/code&gt;.
With BED's 0-based indexing and half-closed interval notation, the same subsequence would be represented as &lt;code&gt;[1, 5)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Confused yet?
Don't worry: off-by-one errors with interval arithmetic are very common in bioinformatics, striking newcomers and old-timers alike.&lt;/p&gt;
&lt;p&gt;An alternative and useful way to conceptualize the BED-style notation is to shift the indices slightly so that they correspond to the spaces &lt;em&gt;between&lt;/em&gt; nucleotides, rather than the nucleotides themselves.
Then, the two integers defining an interval are the ones that bound the nucleotides in question.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        G    A    T    T    A    C    A
     |    |    |    |    |    |    |    |
     0    1    2    3    4    5    6    7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the big question is: are there any compelling reasons to choose one convention over the other?
Or is it simply a matter of preference?&lt;/p&gt;
&lt;p&gt;Until very recently, my opinion has been that it's primarily a matter of preference.
For a variety of other reasons, I have long favored the GFF3 format over any of the alternatives.
Leveraging the &lt;a href="http://www.sequenceontology.org"&gt;Sequence Ontology&lt;/a&gt; and supporting parent/child relationships provides a more flexible, comprehensive, and consistent solution for genome annotation than any of GFF3's tab-delimited relatives.
And counting nucleotides starting from 1 never really felt unnatural, at least from the perspective of a biologist.&lt;/p&gt;
&lt;p&gt;But I'm now convinced that BED-style interval notation is indisputably superior to GFF-style interval notation.
Consider the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One of the most widely cited benefits of BED-style notation is that interval length calculations are much simpler: &lt;code&gt;end - start&lt;/code&gt; rather than &lt;code&gt;end - start + 1&lt;/code&gt;.
  Interval overlap calculations enjoy the same benefit: &lt;code&gt;min(a.end, b.end) - max(a.start, b.start)&lt;/code&gt; instead of &lt;code&gt;min(a.end, b.end) - max(a.start, b.start) + 1&lt;/code&gt;.
  In terms of &lt;em&gt;performance&lt;/em&gt;, I doubt removing these extra operations will make much of a difference for the vast majority of bioinformatics software.
  There is a lot to be gained by making &lt;em&gt;code&lt;/em&gt; cleaner, simpler, and easier to read, though.
  It's important to optimize code for human comprehension whenever possible, and removing superfluous &lt;code&gt;+1&lt;/code&gt;s and &lt;code&gt;-1&lt;/code&gt;s can go a long way in this regard.&lt;/li&gt;
&lt;li&gt;When taking the reverse complement of a sequence, the interval &lt;code&gt;[start, end)&lt;/code&gt; becomes &lt;code&gt;[length - end, length - start)&lt;/code&gt;, rather than &lt;code&gt;[length - end + 1, length - start + 1)&lt;/code&gt;.
  And honestly, the list of cases where the choice of notation makes these pesky &lt;code&gt;+1&lt;/code&gt;s and &lt;code&gt;-1&lt;/code&gt;s disappear keeps going and going, so I'll just leave it at that.&lt;/li&gt;
&lt;li&gt;When splitting a sequence into, for example, 100kb chunks, the BED-style notation gives much cleaner-looking boundaries: &lt;code&gt;[100000, 200000), [200000, 300000)&lt;/code&gt; instead of &lt;code&gt;[100001, 200000], [200001, 300000]&lt;/code&gt; or &lt;code&gt;[100000, 199999], [200000, 299999]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Another compelling argument is that most programming languages utilize 0-based indexing, so using GFF-style notation requires care on the part of the programmer to make the ajustments herself when performing interval/range operations, such as accessing a DNA subsequence stored as a string.
  The BED-style notation leads to very clean C-style loops (&lt;code&gt;for(int i = start; i &amp;lt; end; i++)&lt;/code&gt;), and ranges and slices in Python use the same convention.
  Back in the 80s, before the computer science community had settled on 0-based indexing, renowned computer scientist &lt;a href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html"&gt;Edsger Dijkstra's argument for 0-based indexing&lt;/a&gt; included a simple yet elegant defense of 0-based half-closed interval notation, citing empirical evidence that its use leads to fewer programming errors than any alternative notation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As persuasive as this list is, one might claim that all of these points (perhaps with the exception of Dijkstra's data-supported claims) still fall within the realm of opinion.
But where the GFF-style notation really falls apart is in the encoding of &lt;strong&gt;zero-length features&lt;/strong&gt;.
GFF3 simply has no unambiguous notation for specifying insertion sites, cleavage sites, or any other feature that resides &lt;em&gt;between&lt;/em&gt; nucleotides.
To be clear, the GFF3 specification explicitly addresses this case.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For zero-length features, such as insertion sites, start equals end and the implied site is to the right of the indicated base in the direction of the landmark.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But how is one to distinguish zero-length features from one-length features, which must also be encoded as &lt;code&gt;start = end&lt;/code&gt;?
There is no way to differentiate these two cases without additional (and probably non-canonical) contextual hints, which, as experience shows, come in about as many flavors as there are bioinformaticians.&lt;/p&gt;
&lt;p&gt;So although I still personally prefer GFF3 to the competitors, I now acknowledge the use of 1-based closed intervals as one of its biggest weaknesses.
That leaves me with a couple of options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could bite the bullet and start using the BED format, despite its shortcomings.&lt;/li&gt;
&lt;li&gt;I could push to change GFF3 to use a demonstrably superior interval notation.&lt;/li&gt;
&lt;li&gt;I could continue using GFF3, despite its shortcomings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My hesitation with the first option is that BED is so loosely defined that it barely passes for a "standard" format.
Of course, people adopt different conventions with all of these formats, some of which are clearly incorrect, and many of which are valid but simply different alternative representations of the same data.
But BED gives &lt;em&gt;so much leeway&lt;/em&gt; (user's choice of whitespace or tabs for separating fields, optional fields, and sanctioned derivative formats such as "BED detail") that rigorous checks of data integrity can become quite tedious.
Not that the majority of bioinformatics programmers actually &lt;em&gt;do&lt;/em&gt; rigorous error checking, but you know...&lt;/p&gt;
&lt;p&gt;As much as I would welcome an update to the GFF3 spec, I'm afraid interval notation is too central a feature to change with an incremental update.
It would likely require a new major release of the specification, and with so much code depending on GFF3, I'm not sure the world is quite ready for GFF4.&lt;/p&gt;
&lt;p&gt;So I think for now, my best option is to just stick with GFF3, although I might consider using BED-style notation to represent intervals internally in my software.
If I understand correctly, many of the GMOD tools (which are responsible in large part for the success of GFF3) do this, so it's not an unreasonable approach.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hat tip to &lt;a href="https://github.com/ga4gh/schemas/pull/49#issuecomment-44520397"&gt;this thread&lt;/a&gt; for the insightful discussion and link to the Dijkstra transcript, and to &lt;a href="https://www.biostars.org/p/176583/#176590"&gt;this post&lt;/a&gt; for suggesting that zero-based indices point &lt;em&gt;between&lt;/em&gt; nucleotides.&lt;/p&gt;</summary><category term="annotation"></category><category term="gff3"></category><category term="bed"></category><category term="intervals"></category></entry><entry><title>My tutorial on git banches</title><link href="https://standage.github.io/my-tutorial-on-git-banches.html" rel="alternate"></link><published>2016-02-05T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-02-05:my-tutorial-on-git-banches.html</id><summary type="html">&lt;p&gt;I've been trying subtly (and in a few cases not-so-subtly) for years now to convert my colleagues to the gospel of git and GitHub.
The git version control system has its quirks no doubt, but there is—in my opinion—no more powerful system for open collaboration on software and science than git and GitHub.
A quote I attribute (hopefully correctly) to Software Carpentry's Greg Wilson (&lt;a href="https://twitter.com/gvwilson"&gt;@gvwilson&lt;/a&gt;) captures my sentiments exactly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning git is the tax you pay to use GitHub.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over Christmas break my advisor finally decided it was time to bite the bullet and see what git/GitHub offered that he couldn't get with Subversion.
It took him a while to warm up to the idea, but once he decided to try it, he was committed to giving it his best shot.
He read up on the git/GitHub workflow and immersed himself in it for a week or more.
By the time we reconnected in the new year, he was convinced this was something he wanted to adopt for himself and the rest of the lab.&lt;/p&gt;
&lt;p&gt;Since then, we've been gradually piecing together a lab handbook with lab procedures, guidelines, and tips.
My advisor wrote up a basic git/GitHub tutorial a few weeks ago, and yesterday I wrote a follow-up on using git branches in your daily workflow.
The text of the tutorial is below.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;01.1-Howto-github-branches&lt;/h1&gt;
&lt;p&gt;The git version control system has a feature called &lt;em&gt;branches&lt;/em&gt; that make it safe and easy to implement bug fixes or new features, and to isolate those changes from the main development environment until they are vetted.
The concept of branches is not unique to git: users of Subversion or CVS will recognize the common organizational strategy of placing the main development environment in a &lt;code&gt;trunk/&lt;/code&gt; directory, and then creating experimental branches by copying that directory to a separate &lt;code&gt;branches/&lt;/code&gt; directory.
Indeed, with Subversion, branching is just that—a strategy—and merging branches back into the main trunk can be very tedious and frustrating.
With git, however, branches are a built-in feature: they are trivial to create, and can almost always be merged back into the main line of development (&lt;em&gt;master&lt;/em&gt;) with little or no hassle.&lt;/p&gt;
&lt;p&gt;For a quick intro to git branches, see &lt;a href="https://www.atlassian.com/git/tutorials/using-branches/git-branch"&gt;this tutorial from Atlassian&lt;/a&gt;.
The remainder of this HowTo presents a hypothetical vignette demonstrating how branches could and should be used as part of your daily workflow, and how they help mitigate merge conflicts when working collaboratively.&lt;/p&gt;
&lt;h2&gt;Setting&lt;/h2&gt;
&lt;p&gt;Alice and Bob are two scientists collaborating on a research project they hope to publish soon.
They have implemented a prototype R script to analyze data they have collected, and the R code is stored in a repository on GitHub called &lt;code&gt;BrendelGroup/proj&lt;/code&gt;.
Alice and Bob have their own forks at &lt;code&gt;alice/proj&lt;/code&gt; and &lt;code&gt;bob/proj&lt;/code&gt;, respectively.
Having prototyped the analysis procedure and tested it on small sample data sets, they are ready to move forward by polishing up the prototype, running the analysis on complete data sets, reporting their results, and discussing their interpretation.&lt;/p&gt;
&lt;p&gt;Monday morning, Alice and Bob spent some time working on their manuscript, documenting the motivation for their work, describing their methodology, and putting in placeholders for results they will soon generate.
Monday afternoon, after working on the manuscript, they discussed what  needed to be done next at a technical level.
- First, they need to fix a small bug in the R prototype.
  They opened a new thread on the &lt;code&gt;BrendelGroup/proj&lt;/code&gt; issue tracker on GitHub to describe the bug, what causes the script to fail, and their plan to fix the bug.
  The issue tracker designated this thread &lt;code&gt;#14&lt;/code&gt;.
- Second, they need to add one more step to their analysis procedure.
  They described this step at (a high level) in the &lt;em&gt;Methods&lt;/em&gt; section of their paper earlier that morning, but they took some time now to start a new thread on the GitHub issue tracker and describe their precise plan for implementating this additional step in R.
  The issue tracker designated this thread &lt;code&gt;#15&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;First branch&lt;/h2&gt;
&lt;p&gt;On Tuesday morning, Alice comes in to the office to work on the project.
She decides to get to work right away fixing the bug they discussed the previous day.
She logs in to her laptop, fires up a terminal, changes to the directory containing her local clone of the repository, and checks her status...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /home/alice/proj/
git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...to which her terminal responds as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;On branch master
nothing to commit, working directory clean
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;She's on the main/default development branch &lt;em&gt;master&lt;/em&gt;, and the working directory is &lt;em&gt;clean&lt;/em&gt;, meaning no changes have been made to the code since the last commit.&lt;/p&gt;
&lt;p&gt;Since everything looks good, Alice creates a new branch called &lt;code&gt;bugfix&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch bugfix
git checkout bugfix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;She then opens up the R script and takes about 30 minutes to fix the code and test her solution.
Once she's confident it is correct, she commits a new snapshot to her local repository.
She references the corresponding GitHub thread in her commit message, using syntax that will automatically close the thread in the issue tracker once the commit is merged into the &lt;code&gt;master&lt;/code&gt; branch of &lt;code&gt;BrendelGroup/proj&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add analysis.R
git commit -m &amp;#39;Fixed estimation bug. Closes #14.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pull request&lt;/h2&gt;
&lt;p&gt;At this point, the git repository on Alice's laptop has the bugfix, but the changes haven't been pushed anywhere else: her fork on GitHub (&lt;code&gt;alice/proj&lt;/code&gt;), the original "upstream" repository on GitHub (&lt;code&gt;BrendelGroup/proj&lt;/code&gt;), or Bob's fork (&lt;code&gt;bob/proj&lt;/code&gt;).
Referring back to the creative triangle described in &lt;a href="https://github.com/BrendelGroup/bghandbook/blob/master/doc/01-Howto-github.md"&gt;the GitHub howto&lt;/a&gt;, Alice proceeds by pushing her latest commit (stored on a branch called &lt;code&gt;bugfix&lt;/code&gt;) to her fork on GitHub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin bugfix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;She now goes to GitHub and opens a pull request to merge &lt;code&gt;alice/proj:bugfix&lt;/code&gt; into &lt;code&gt;BrendelGroup/proj:master&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Second branch&lt;/h2&gt;
&lt;p&gt;With the bug fix resolved, Alice now turns to the final step in their analysis procedure.
The bug has nothing to do with this final step, so she starts by returning to the master branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Her directory now looks just like it did before she started working this morning.
This provides a clean slate for Alice to begin working on the analysis procedure.
She proceeds by creating a new branch in her local repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch laststep
git checkout laststep
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;She then takes an hour or so to prepare a few small data files she will use to test the R script after the new feature is implemented.
Next, once she is confident the tests are correct, she opens up the R script again and implements the new procedure.
With test data already in place, it is very easy for Alice to confirm when the procedure is working correctly.&lt;/p&gt;
&lt;p&gt;Finally, after all her tests pass, Alice commits a new snapshot in her local repository.
Again, she references the corresponding thread on the GitHub issue tracker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add analysis.R testdatafiles/
git commit -m &amp;#39;Implemented final analysis step. Closes #15.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Another pull request&lt;/h2&gt;
&lt;p&gt;Just as before, Alice's new feature is present only on her laptop.
She needs to push out to her fork and open a pull request to get these changes integrated into the main repository.&lt;/p&gt;
&lt;p&gt;First she pushes to her fork...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin laststep
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and then goes to GitHub to open a pull request to merge &lt;code&gt;alice/proj:laststep&lt;/code&gt; into &lt;code&gt;BrendelGroup/proj:master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point, she has two open pull requests waiting for Bob to review and accept.
Having worked for a few hours at this point, Alice takes a break to have lunch and attend a seminar.&lt;/p&gt;
&lt;h2&gt;Bob's review&lt;/h2&gt;
&lt;p&gt;When Bob arrives at his office late on Tuesday morning, he's suspicious that the solution he discussed with Alice the day before is incorrect.
After digging through the data for a bit, he confirms his suspicion that they have made some incorrect assumptions about the input data, and that the bugfix they discussed previously isn't valid.
He logs on to GitHub to comment on thread &lt;code&gt;#14&lt;/code&gt; and explain his findings.
Bob notes that Alice has already submitted a pull request to fix the bug, and adds a comment to the thread explaining why their proposed solution won't work.&lt;/p&gt;
&lt;p&gt;Bob also notes that Alice has submitted a pull request with her implementation of the final step of the procedure.
He reviews the changes to the code on her &lt;code&gt;laststep&lt;/code&gt; branch, understands the changes she made, and notes that she has provided test cases for validating the procedure.
Since everything looks good, Bob accepts the pull request.
GitHub automatically closes issue &lt;code&gt;#15&lt;/code&gt; at this point, since Alice's commit message included the text &lt;code&gt;Closes #15&lt;/code&gt;.
Bob opens up his terminal, goes to his local clone of the repository, and pulls the latest changes from &lt;code&gt;BrendelGroup/proj&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /home/bob/proj
git pull upstream master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;He then pushes those changes out to his fork to keep everything in sync.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Bob's bug fix&lt;/h2&gt;
&lt;p&gt;After his morning data slogging session, Bob has a much better grasp on how to fix the bug in their R code.
He has a few minutes before he has to teach a class, so he takes a stab at implementing the bug fix.
Bob starts by creating a new branch in his local repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch newbugfix
git checkout newbugfix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;He then edits the R code and tests that it works on a variety of inputs.
Once he's confident the bug fix handles the input data correctly, he makes a new commit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add analysis.R
git commit -m &amp;#39;Alternative approach to fixing the estimation bug. See my comments in #14. Closes #14.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bob then pushes this new branch to his fork on GitHub...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin newbugfix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and opens a pull request on GitHub to merge &lt;code&gt;bob/proj:newbugfix&lt;/code&gt; into &lt;code&gt;BrendelGroup/proj:master&lt;/code&gt;.
He then rushes out the door to go to his class.&lt;/p&gt;
&lt;h2&gt;Alice's review&lt;/h2&gt;
&lt;p&gt;When Alice returns from her lunch and seminar, she goes to GitHub to check on the status of her pull requests.
She's happy to see that Bob has accepted her second pull request, but sees that the other is still open.
She reads Bob's comments on &lt;code&gt;#14&lt;/code&gt; and after a few minutes of thinking things over herself she understands and agrees with his assessment.
She closes her unmerged pull request and deletes the &lt;code&gt;bugfix&lt;/code&gt; branch from her fork on GitHub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin :bugfix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alice then takes a look at Bob's proposed solution, reviews the code, and finding it solid she merges his pull request.
GitHub automatically closes issue &lt;code&gt;#14&lt;/code&gt; at this point, since Bob's commit message included the text &lt;code&gt;Closes #14&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now Alice needs to syncronize her laptop with the new changes.
First, she switches back to the main &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, her directory looks just like it did before she started work this morning.
The changes she made before lunch are stored in dedicated branches, and she has not touched the main &lt;code&gt;master&lt;/code&gt; branch on her laptop.
To update her local &lt;code&gt;master&lt;/code&gt; branch, she pulls from &lt;code&gt;BrendelGroup/proj&lt;/code&gt;...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull upstream master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and then pushes those updates out to her fork.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Cleanup&lt;/h2&gt;
&lt;p&gt;At this point the &lt;code&gt;master&lt;/code&gt; branch is up-to-date both on Alice's fork and her laptop.
She has also deleted the &lt;code&gt;bugfix&lt;/code&gt; branch on her fork, but the &lt;code&gt;bugfix&lt;/code&gt; branch is still present on her laptop, and the &lt;code&gt;laststep&lt;/code&gt; branch is still present both on her fork and her laptop.
She wants to delete all of these branches now, since &lt;code&gt;laststep&lt;/code&gt; has been merged and &lt;code&gt;bugfix&lt;/code&gt; is a dead end.&lt;/p&gt;
&lt;p&gt;Alice can list the branches in her local clone, highlighting the active branch, with the command...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and she can list the branches in her GitHub fork (along with some other information) using the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote show origin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alice then uses the following commands to delete the remaining extraneous branches.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin :laststep # Delete `laststep` on `alice/proj`
git branch -d laststep    # Delete `laststep` branch on laptop
git branch -D bugfix      # Force deletion of the unmerged `bugfix` branch on laptop
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;This story could have turned out very differently had Alice not used branches in her workflow.
She would have committed her incorrect implementation of the bug fix to her &lt;code&gt;master&lt;/code&gt; branch, followed by her correct implementation of the final step of their analysis procedure to the same &lt;code&gt;master&lt;/code&gt; branch.
Had she then submitted a pull request to merge &lt;code&gt;alice/proj:master&lt;/code&gt; into &lt;code&gt;BrendelGroup/proj:master&lt;/code&gt;, Bob would not have been able to merge it because of the erroneous bug fix.
There would be no easy way for her to keep the latest commit while discarding an earlier commit, or to integrate Bob's new solution without merge conflicts.
She likely would have had to rewind two commits in her history to get rid of her bug fix and re-implement the final step to their analysis procedure, and then use the &lt;code&gt;--force&lt;/code&gt; option to overwrite the commit history she had previously pushed to her fork.&lt;/p&gt;
&lt;p&gt;By using branches, Alice cleanly isolated each set of changes from the main development branch, and was able to discard one set of changes without affecting the other set of changes.
Using branches with git and GitHub is an excellent mechanism to keep your work organized into small manageable chunks that can be developed, evaluated, and merged independently.&lt;/p&gt;</summary><category term="programming"></category><category term="git"></category></entry><entry><title>Building a decision tree chart with graphviz</title><link href="https://standage.github.io/building-a-decision-tree-chart-with-graphviz.html" rel="alternate"></link><published>2016-01-25T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-01-25:building-a-decision-tree-chart-with-graphviz.html</id><summary type="html">&lt;p&gt;I'm preparing a manuscript, and I sketched out the following chart I would like to include.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://standage.github.io/images/ilocus-decision-tree.jpg" alt="Chart" style="width: 450px" /&gt;&lt;/p&gt;
&lt;p&gt;With my rudimentary &lt;a href="http://www.graphviz.org/"&gt;graphviz&lt;/a&gt; experience, I threw together the following representation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;digraph
{
    ilocus [label=&amp;quot;iLocus&amp;quot;]
    gilocus [label=&amp;quot;giLocus&amp;quot;]
    pilocus [label=&amp;quot;piLocus&amp;quot;]
    nilocus [label=&amp;quot;niLocus&amp;quot;]
    silocus [label=&amp;quot;siLocus&amp;quot;]
    cilocus [label=&amp;quot;ciLocus&amp;quot;]
    filocus [label=&amp;quot;fiLocus&amp;quot;]
    iilocus [label=&amp;quot;iiLocus&amp;quot;]

    containgene [label=&amp;quot;Contains gene(s)?&amp;quot;]
    proteincoding [label=&amp;quot;Protein coding?&amp;quot;]
    multiplegenes [label=&amp;quot;Multiple genes?&amp;quot;]
    geneflank [label=&amp;quot;Flanked by genes on both sides?&amp;quot;]

    ilocus -&amp;gt; containgene
    containgene -&amp;gt; geneflank [label=&amp;quot;No&amp;quot;]
    geneflank -&amp;gt; filocus [label=&amp;quot;No&amp;quot;]
    geneflank -&amp;gt; iilocus [label=&amp;quot;Yes&amp;quot;]
    containgene -&amp;gt; gilocus [label=&amp;quot;Yes&amp;quot;]
    gilocus -&amp;gt; proteincoding
    proteincoding -&amp;gt; nilocus [label=&amp;quot;No&amp;quot;]
    proteincoding -&amp;gt; pilocus [label=&amp;quot;Yes&amp;quot;]
    pilocus -&amp;gt; multiplegenes
    multiplegenes -&amp;gt; silocus [label=&amp;quot;No&amp;quot;]
    multiplegenes -&amp;gt; cilocus [label=&amp;quot;Yes&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Saved as &lt;code&gt;take1.dot&lt;/code&gt; and rendered with the command &lt;code&gt;dot -Tpng -o take1.png take.dot&lt;/code&gt;, we get this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chart, take 1" src="https://standage.github.io/images/take1.png" /&gt;&lt;/p&gt;
&lt;p&gt;It's not bad for a first pass, but let's adjust the style a bit to distinguish between iLocus designations and branching logic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;digraph
{
    node [color=Limegreen,fontcolor=Limegreen,shape=oval]
    ilocus [label=&amp;quot;iLocus&amp;quot;]
    gilocus [label=&amp;quot;giLocus&amp;quot;]
    pilocus [label=&amp;quot;piLocus&amp;quot;]
    nilocus [label=&amp;quot;niLocus&amp;quot;]
    silocus [label=&amp;quot;siLocus&amp;quot;]
    cilocus [label=&amp;quot;ciLocus&amp;quot;]
    filocus [label=&amp;quot;fiLocus&amp;quot;]
    iilocus [label=&amp;quot;iiLocus&amp;quot;]

    node [color=Blue,fontcolor=Blue,shape=diamond]
    containgene [label=&amp;quot;Contains gene(s)?&amp;quot;]
    proteincoding [label=&amp;quot;Protein coding?&amp;quot;]
    multiplegenes [label=&amp;quot;Multiple genes?&amp;quot;]
    geneflank [label=&amp;quot;Flanked by genes\non both sides?&amp;quot;]

    ilocus -&amp;gt; containgene
    containgene -&amp;gt; geneflank [label=&amp;quot;No&amp;quot;]
    geneflank -&amp;gt; filocus [label=&amp;quot;No&amp;quot;]
    geneflank -&amp;gt; iilocus [label=&amp;quot;Yes&amp;quot;]
    containgene -&amp;gt; gilocus [label=&amp;quot;Yes&amp;quot;]
    gilocus -&amp;gt; proteincoding
    proteincoding -&amp;gt; nilocus [label=&amp;quot;No&amp;quot;]
    proteincoding -&amp;gt; pilocus [label=&amp;quot;Yes&amp;quot;]
    pilocus -&amp;gt; multiplegenes
    multiplegenes -&amp;gt; silocus [label=&amp;quot;No&amp;quot;]
    multiplegenes -&amp;gt; cilocus [label=&amp;quot;Yes&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That gives us the following.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chart, take 2" src="https://standage.github.io/images/take2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now, let's see if we can get the &lt;code&gt;giLocus&lt;/code&gt; and &lt;code&gt;piLocus&lt;/code&gt; nodes on the same level as in the sketch, using &lt;code&gt;rank=same&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;digraph
{
    node [color=Limegreen,fontcolor=Limegreen,shape=oval]
    ilocus [label=&amp;quot;iLocus&amp;quot;]
    gilocus [label=&amp;quot;giLocus&amp;quot;]
    pilocus [label=&amp;quot;piLocus&amp;quot;]
    nilocus [label=&amp;quot;niLocus&amp;quot;]
    silocus [label=&amp;quot;siLocus&amp;quot;]
    cilocus [label=&amp;quot;ciLocus&amp;quot;]
    filocus [label=&amp;quot;fiLocus&amp;quot;]
    iilocus [label=&amp;quot;iiLocus&amp;quot;]

    node [color=Blue,fontcolor=Blue,shape=diamond]
    containgene [label=&amp;quot;Contains gene(s)?&amp;quot;]
    proteincoding [label=&amp;quot;Protein coding?&amp;quot;]
    multiplegenes [label=&amp;quot;Multiple genes?&amp;quot;]
    geneflank [label=&amp;quot;Flanked by genes\non both sides?&amp;quot;]

    {rank = same; containgene; gilocus}
    {rank = same; proteincoding; pilocus}

    ilocus -&amp;gt; containgene
    containgene -&amp;gt; geneflank [label=&amp;quot;No&amp;quot;]
    geneflank -&amp;gt; filocus [label=&amp;quot;No&amp;quot;]
    geneflank -&amp;gt; iilocus [label=&amp;quot;Yes&amp;quot;]
    containgene -&amp;gt; gilocus [label=&amp;quot;Yes&amp;quot;]
    gilocus -&amp;gt; proteincoding
    proteincoding -&amp;gt; nilocus [label=&amp;quot;No&amp;quot;]
    proteincoding -&amp;gt; pilocus [label=&amp;quot;Yes&amp;quot;]
    pilocus -&amp;gt; multiplegenes
    multiplegenes -&amp;gt; silocus [label=&amp;quot;No&amp;quot;]
    multiplegenes -&amp;gt; cilocus [label=&amp;quot;Yes&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That gives us the following.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chart, take 3" src="https://standage.github.io/images/take3.png" /&gt;&lt;/p&gt;
&lt;p&gt;Getting there!
Now, let's use the &lt;code&gt;compass_pt&lt;/code&gt; feature to specify which side of the diamonds we want the arrows to come from.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;digraph
{
    node [color=Limegreen,fontcolor=Limegreen,shape=oval]
    ilocus [label=&amp;quot;iLocus&amp;quot;]
    gilocus [label=&amp;quot;giLocus&amp;quot;]
    pilocus [label=&amp;quot;piLocus&amp;quot;]
    nilocus [label=&amp;quot;niLocus&amp;quot;]
    silocus [label=&amp;quot;siLocus&amp;quot;]
    cilocus [label=&amp;quot;ciLocus&amp;quot;]
    filocus [label=&amp;quot;fiLocus&amp;quot;]
    iilocus [label=&amp;quot;iiLocus&amp;quot;]

    node [color=Blue,fontcolor=Blue,shape=diamond]
    containgene [label=&amp;quot;Contains gene(s)?&amp;quot;]
    proteincoding [label=&amp;quot;Protein coding?&amp;quot;]
    multiplegenes [label=&amp;quot;Multiple genes?&amp;quot;]
    geneflank [label=&amp;quot;Flanked by genes\non both sides?&amp;quot;]

    {rank = same; containgene; gilocus}
    {rank = same; proteincoding; pilocus}

    ilocus -&amp;gt; containgene
    containgene:w -&amp;gt; geneflank [label=&amp;quot;No&amp;quot;]
    geneflank:e -&amp;gt; filocus [label=&amp;quot;No&amp;quot;]
    geneflank:w -&amp;gt; iilocus [label=&amp;quot;Yes&amp;quot;]
    containgene:e -&amp;gt; gilocus [label=&amp;quot;Yes&amp;quot;]
    gilocus -&amp;gt; proteincoding
    proteincoding:w -&amp;gt; nilocus [label=&amp;quot;No&amp;quot;]
    proteincoding:e -&amp;gt; pilocus [label=&amp;quot;Yes&amp;quot;]
    pilocus -&amp;gt; multiplegenes
    multiplegenes:e -&amp;gt; silocus [label=&amp;quot;No&amp;quot;]
    multiplegenes:w -&amp;gt; cilocus [label=&amp;quot;Yes&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We end up with this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chart, take 4" src="https://standage.github.io/images/take4.png" /&gt;&lt;/p&gt;
&lt;p&gt;Everything looks good here except for the edges.
Is there any way we can force straight edges with corners, like in the sketch, rather than the curved edges?
The &lt;code&gt;splines=ortho&lt;/code&gt; setting seems to be designed just for that.
Let's try it out (also requires setting edge labels to &lt;code&gt;xlabel&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;digraph
{
    graph [splines=ortho]

    node [color=Limegreen,fontcolor=Limegreen,shape=oval]
    ilocus [label=&amp;quot;iLocus&amp;quot;]
    gilocus [label=&amp;quot;giLocus&amp;quot;]
    pilocus [label=&amp;quot;piLocus&amp;quot;]
    nilocus [label=&amp;quot;niLocus&amp;quot;]
    silocus [label=&amp;quot;siLocus&amp;quot;]
    cilocus [label=&amp;quot;ciLocus&amp;quot;]
    filocus [label=&amp;quot;fiLocus&amp;quot;]
    iilocus [label=&amp;quot;iiLocus&amp;quot;]

    node [color=Blue,fontcolor=Blue,shape=diamond]
    containgene [label=&amp;quot;Contains gene(s)?&amp;quot;]
    proteincoding [label=&amp;quot;Protein coding?&amp;quot;]
    multiplegenes [label=&amp;quot;Multiple genes?&amp;quot;]
    geneflank [label=&amp;quot;Flanked by genes\non both sides?&amp;quot;]

    {rank = same; containgene; gilocus}
    {rank = same; proteincoding; pilocus}

    ilocus -&amp;gt; containgene
    containgene:w -&amp;gt; geneflank [xlabel=&amp;quot;No&amp;quot;]
    geneflank:e -&amp;gt; filocus [xlabel=&amp;quot;No&amp;quot;]
    geneflank:w -&amp;gt; iilocus [xlabel=&amp;quot;Yes&amp;quot;]
    containgene:e -&amp;gt; gilocus [xlabel=&amp;quot;Yes&amp;quot;]
    gilocus -&amp;gt; proteincoding
    proteincoding:w -&amp;gt; nilocus [xlabel=&amp;quot;No&amp;quot;]
    proteincoding:e -&amp;gt; pilocus [xlabel=&amp;quot;Yes&amp;quot;]
    pilocus -&amp;gt; multiplegenes
    multiplegenes:e -&amp;gt; silocus [xlabel=&amp;quot;No&amp;quot;]
    multiplegenes:w -&amp;gt; cilocus [xlabel=&amp;quot;Yes&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which gives us this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chart, take 5" src="https://standage.github.io/images/take5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Whoa, definitely not what I had in mind.
I haven't been able to figure this last step out.
If I can't figure out how to force straight edges with corners, then I think I'll have to go with "take 3" above, the last figure before the &lt;code&gt;compass_pt&lt;/code&gt; feature was used.&lt;/p&gt;</summary><category term="visualization"></category><category term="graphviz"></category></entry><entry><title>Formatting C code with clang-format</title><link href="https://standage.github.io/formatting-c-code-with-clang-format.html" rel="alternate"></link><published>2016-01-19T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-01-19:formatting-c-code-with-clang-format.html</id><summary type="html">&lt;p&gt;Code formatting styles: the thing we all love to hate.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The rules are like guidelines anyway" src="https://standage.github.io/images/pirate-guidelines.gif" /&gt;&lt;/p&gt;
&lt;p&gt;The best formatting style is the style you don't have to think about, the style that helps you focus on the logical flow of your code.
The best formatting style is consistent and organic, providing an intuitive visual representation of program organization.&lt;/p&gt;
&lt;p&gt;On the other hand, pedantic enforcement formatting styles can outweigh any benefits you get from it in the first place.&lt;/p&gt;
&lt;p&gt;A lot of digital ink has been spilled and flame wars fought over this topic, and I will not belabor the point here.
Suffice it to say that I think that enforcement of code formatting style is, on the whole, a good thing.
Styles focus mostly on readability, which is a HUGE DEAL when it comes to collaborative development and maintenance of code.
Simplifying the &lt;em&gt;maintenance&lt;/em&gt; of your code will save much more of your time and others' time in the future than almost any technical optimization.
Explicitly enforcing a style convention (like Python's PEP8, and associated tools &lt;code&gt;pep8&lt;/code&gt; and &lt;code&gt;autopep8&lt;/code&gt;) minimize conflicts between project contributors, and make it easier to integrate contributions from new contributors.
Exceptions can be considered on a per-case basis, and most enforcement tools provide mechanisms for marking code to ignore, but for the most part the rules are there to be followed for everyone's benefit.&lt;/p&gt;
&lt;p&gt;For Python programming, the PEP8 style is the uncontested standard.
There may be others out there, but they're surely obscure and &lt;em&gt;ad hoc&lt;/em&gt;.
When it comes to C and C++, however, there are many different popular styles.
There are lots of commonalities, but the differences (particularly in the placement of braces) make a huge difference in the appearance of the code.
I prefer the popular Allman style, the K&amp;amp;R style (also popular) is pretty reasonable, but styles like Whitesmith and Pico are just nuts!
See &lt;a href="http://www.terminally-incoherent.com/blog/2009/04/10/the-only-correct-indent-style/"&gt;this page&lt;/a&gt; for some examples.&lt;/p&gt;
&lt;p&gt;So in some &lt;a href="https://matt.sh/howto-c"&gt;recent reading&lt;/a&gt; I came across a tool called &lt;code&gt;clang-format&lt;/code&gt; that will automatically format C code based on your preferred style.
All of my C code formatting has previously been self-enforced, but after using &lt;code&gt;pep8&lt;/code&gt; and &lt;code&gt;autopep8&lt;/code&gt; on my Python code for a few years now I thought it was time to let an automated tool do the work for me.
Here's my config file (&lt;code&gt;.clang-format&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BasedOnStyle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;llvm&lt;/span&gt;
&lt;span class="n"&gt;IndentWidth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;AllowShortFunctionsOnASingleLine&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;KeepEmptyLinesAtTheStartOfBlocks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;BreakBeforeBraces&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Allman&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's the command I use to reformat a file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;clang-format -i -style=file src/locuspocus.c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Credits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matt.sh/howto-c"&gt;This post&lt;/a&gt; got me going on this.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/29477654/how-to-make-clang-format-add-new-line-before-opening-brace-of-a-function"&gt;This thread&lt;/a&gt; was helpful&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html"&gt;This page&lt;/a&gt; has the official documentation.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/25880990/clang-format-breaks-lint-annotations"&gt;This answer&lt;/a&gt; describes a nice trick for disabling style checks for a code block.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="programming"></category><category term="c"></category></entry><entry><title>PEP8 and the Atom editor</title><link href="https://standage.github.io/pep8-and-the-atom-editor.html" rel="alternate"></link><published>2016-01-19T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2016-01-19:pep8-and-the-atom-editor.html</id><summary type="html">&lt;p&gt;I tried out the &lt;a href="https://atom.io/"&gt;Atom text editor&lt;/a&gt; very soon after it came out.
For some reason--whether a half-hearted attempt on my part, or the fact that Atom was an unrefined beta--I didn't love it.
After only a day or two, I reverted to the Komodo Edit editor I had been comfortable with for several years.&lt;/p&gt;
&lt;p&gt;Recently, I heard a colleague describe Atom as a "Markdown editor".
I was surprised, since my impression is that Atom was developed as a general purpose editor.
But after my colleague showed me Atom's real-time Markdown render/preview feature, I figured I might give Atom a try again.&lt;/p&gt;
&lt;p&gt;I'm enjoying Atom much better this time around.
After working with it for a few days doing some basic programming (Python) and writing (Markdown) I had no complaints.
It was only when I started revisiting some of my C code that I started having problems.&lt;/p&gt;
&lt;p&gt;Not serious problems by any means: maybe &lt;em&gt;annoyances&lt;/em&gt; is a better word.
Anyway, I follow PEP8 for the most part when I write Python code, so I had my wrap guide set to 79 characters.
This became awkward when I am working on C code, where I have long used 80 characters as the limit.
I was not enthusiastic about switching the wrap guide every time I changed langauges, which seemed to be the only alternative to just switching the whole thing off.&lt;/p&gt;
&lt;p&gt;Since Atom is touted as the ultimate hackable and configurable editor, I figured I would see if the wrap guide is something I can configure on a per-language basis.
Surely enough, a bit of Google searching uncovered &lt;a href="https://atom.io/packages/wrap-guide"&gt;the secret&lt;/a&gt;.
The &lt;code&gt;preferredLineLength&lt;/code&gt; attribute under &lt;code&gt;editor&lt;/code&gt; controls where the wrap guide is displayed.
I set the default (under &lt;code&gt;*&lt;/code&gt;) to 80, and then I created another Python-specific configuration with &lt;code&gt;".source.py"&lt;/code&gt;, with &lt;code&gt;preferredLineLength&lt;/code&gt; set to 79.&lt;/p&gt;
&lt;p&gt;Here is my Atom configuration file, stored at &lt;code&gt;~/.atom/config.cson&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;*&amp;quot;:
  core:
    disabledPackages: [
      &amp;quot;spell-check&amp;quot;
    ]
    projectHome: &amp;quot;/Users/standage/Software&amp;quot;
  editor:
    fontFamily: &amp;quot;Consolas&amp;quot;
    invisibles: {}
    preferredLineLength: 80
    showIndentGuide: true
    tabLength: 4
  welcome:
    showOnStartup: false

&amp;quot;.source.py&amp;quot;:
  &amp;quot;editor:&amp;quot;:
    preferredLineLength: 79
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it!&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>Misconceptions about research software</title><link href="https://standage.github.io/misconceptions-about-research-software.html" rel="alternate"></link><published>2015-12-16T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2015-12-16:misconceptions-about-research-software.html</id><summary type="html">&lt;p&gt;I stumbled across &lt;a href="https://www.quora.com/I-have-5-years-of-working-experience-but-I-still-code-very-slow-How-can-I-code-faster-What-should-I-learn"&gt;the following question&lt;/a&gt; the other day in an email digest from Quora.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have 5 years of working experience, but I still code very slow.
How can I code faster? What should I learn?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most of the responses don't answer the question directly, but instead make the point that speed is a very poor metric by which to measure quality or productivity in software engineering.
Carefully designing, documenting, implementing, and testing code requires considerable time and resources upfront, but not nearly as much time and resources as is required in later stages to maintain or fix code that was written quickly and sloppily.&lt;/p&gt;
&lt;p&gt;In this case, I think the &lt;a href="http://meta.stackexchange.com/a/146514/151867"&gt;OP&lt;/a&gt; fell into the trap of thinking that writing code is just about writing code.
In reality, code is just a projection of a programmer's conceptual model of something onto a representation that a computer can interpret and execute.
If your initial conceptual model is clear, your code will be clear and easy to write.
If your initial conceptual model is fuzzy, you'll probably end up taking the long way to a workable solution, leaving lots of crufty code in your wake.
Research software engineering is so much more than just "writing code".&lt;/p&gt;
&lt;p&gt;In the ideal situation (i.e., with a clear and accurate mathematical model in hand, and with informed choices about which algorithms and data structures provide an efficient computational solution), writing the actual code is almost an afterthought.
Once the model is nailed down, the programmer has quite a bit of technical freedom when it comes to implementation and testing, but the precise details of implementation are of little interest compared to the results produced by the software.&lt;/p&gt;
&lt;p&gt;In the real world, I get the impression that most programmers and programmer-scientists rarely achieve this ideal, and end up developing and refining their models &lt;em&gt;as they write the code&lt;/em&gt;.
I think some of this has to do with lack of discipline, which each scientist has to address on a personal level.
I think it also has to do with lack of training, of which I think we could be doing much better job as a field.&lt;/p&gt;
&lt;p&gt;But I think the notion (all too common in academics) that research software engineering is a technical exercise ("just writing code") rather than an intellectual one is particularly problematic.
It's problematic for those that create the software, who all too often jump head-first into &lt;em&gt;writing code&lt;/em&gt; without having done the proper modeling and design upfront.
It's problematic for those in a position to supervise or evaluate or fund research, who all too often trivialize software because it's "just writing code".&lt;/p&gt;
&lt;p&gt;A few months ago the bioinformatics twittersphere/blogosphere got caught up in a great discussion on the purpose of software in academic research.
I was able to dig through some old notes and find a link to &lt;a href="http://phdops.kblin.org/software-dev-intellectual-contribution.html"&gt;an excellent blog post&lt;/a&gt; which provides links to lots of good reading on the topic.
I particularly like the analogy he made between experiments (design vs execution) and software (design vs implementation).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software development in science is often compared to conductiong [sic] experimental work, and because most people argue that experimental work is a means to an end, that is not a primary product of science.
So, by analogy, neither should software development be.
The actual &lt;em&gt;scientific&lt;/em&gt; contribution is designing the experiment in the first place.
Now, the analogy has one slight problem here, and I'm tempted to blame that problem on the pretty shoddy practices around software development in science, people have written about this before.
Mainly, people seem to assume that &lt;strong&gt;implementing&lt;/strong&gt; the software is all there is for software development.
I humbly disagree.
I would argue that the analogy with wet lab work would be that &lt;strong&gt;designing experiments&lt;/strong&gt; is like &lt;strong&gt;designing software&lt;/strong&gt;, and &lt;strong&gt;conducting experiments&lt;/strong&gt; is like &lt;strong&gt;implementing software&lt;/strong&gt;.
Now if we follow the general agreement that designing experiments is a valuable intellectual input to the scientific endeavour, by analogy so should designing software.
So, the answer the question I asked in the topic of the post "Is software development in science an intellectual contribution?" would be "Yes, parts of it at least".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree: the design of research software should be treated as a valid intellectual contribution in the academic science enterprise, and credit should be rendered accordingly.&lt;/p&gt;</summary><category term="software"></category><category term="academics"></category><category term="credit"></category></entry><entry><title>Shell pipelines in Python</title><link href="https://standage.github.io/shell-pipelines-in-python.html" rel="alternate"></link><published>2015-12-15T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2015-12-15:shell-pipelines-in-python.html</id><summary type="html">&lt;p&gt;The UNIX shell is an indispensible tool for project organization and data management in bioinformatics.
I spend &lt;em&gt;a lot&lt;/em&gt; of time in the shell, and having picked up on a lot of time-saving techniques over the years it might just be my favorite computing environment.&lt;/p&gt;
&lt;p&gt;The shell has its limitations, however.
Piping, the very feature that gives the shell its amazing power and flexibility, can also lead to some pretty gruesome syntax.
Debugging shell code is tough, the error handling is rudimentary, and good luck finding a good framework for automated tests.
In short, the shell is great for interactive computing and automating simple tasks, but when it comes to workflows requiring more fine-grained control, a language like Python is often a better choice.&lt;/p&gt;
&lt;p&gt;Here I provide a Python translation of several shell commands.&lt;/p&gt;
&lt;h2&gt;Simplest case&lt;/h2&gt;
&lt;p&gt;You don't typically get much bioinformatics work done with a single command without arguments.
Anything substantial will involve data files, parameters, and so on, that are typically specified using arguments on the command line (you don't have these hard coded in a script, do you?!?!).
But just for sake of completeness, it's very straightforward to execute shell commands this way in Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Python equivalent is as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is even the simpler &lt;code&gt;call&lt;/code&gt; function...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...but for most situations I find the &lt;code&gt;check_call&lt;/code&gt; more useful, since it will halt the Python code immediately if the subprocess returns a non-zero status.&lt;/p&gt;
&lt;h2&gt;Command with arguments&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -lhp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Commands with arguments cannot simply be dropped in to the &lt;code&gt;check_call&lt;/code&gt; command as-is.
The following code will fail.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls -lhp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are two ways you can fix this: the convenient (and wrong and insecure) way...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls -lhp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and The Right Way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-lhp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The convenience of the first method comes at the cost of security: the &lt;code&gt;shell=True&lt;/code&gt; setting introduces vulnerability to &lt;a href="https://security.openstack.org/guidelines/dg_use-subprocess-securely.html"&gt;shell injections&lt;/a&gt;.
This isn't the type of thing you expect to encounter much in the research setting, but it's an important consideration nonetheless, and exceptions should be made with caution.&lt;/p&gt;
&lt;p&gt;This example is pretty silly, since you'll probably never need to call the &lt;code&gt;ls&lt;/code&gt; command from Python.
Let's do a different example you're much more likely to encounter in bioinformatics.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blastx -db /opt/ncbi/nr -query tsa.fasta &lt;span class="se"&gt;\&lt;/span&gt;
       -evalue 1e-4 -num_threads &lt;span class="nv"&gt;$numthreads&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
       -out tsa-vs-nr.blastx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Python equivalent is as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blastx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/opt/ncbi/nr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tsa.fasta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;&amp;#39;-evalue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1e-4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-num_threads&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numthreads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="s1"&gt;&amp;#39;-out&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tsa-vs-nr.blastx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Redirect stdin and stdout&lt;/h2&gt;
&lt;p&gt;Many programs and commands allow you to specify input and output files as arguments, as in the &lt;code&gt;blastx&lt;/code&gt; command above.
However, sometimes your only options are &lt;code&gt;stdin&lt;/code&gt; and/or &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed s/^scaffold_/PcanScaf/ &amp;lt; pcan-in.gff3 &amp;gt; pcan-out.gff3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the Python equivalent.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pcan-in.gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;instream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pcan-out.gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;outstream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/^scaffold_/PcanScaf/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;outstream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The main event: pipelines&lt;/h2&gt;
&lt;p&gt;Handling input and output for single commands is great and all, but the real power of the shell is piping commands together like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -v &lt;span class="s1"&gt;$&amp;#39;\tintron\t&amp;#39;&lt;/span&gt; loci.gff3 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; pmrna --locus --accession --map&lt;span class="o"&gt;=&lt;/span&gt;map.txt &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; canon-gff3 --outfile&lt;span class="o"&gt;=&lt;/span&gt;locus.mrnas.gff3 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unless we want to introduce security vulnerabilities, we cannot simply run these commands with a single call to the &lt;code&gt;check_call&lt;/code&gt; function.
For this use case, we want to use the &lt;code&gt;Popen&lt;/code&gt; constructor and the &lt;code&gt;communicate&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;grepproc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;intron&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loci.gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pmrnaproc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pmrna&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--locus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--accession&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--map=map.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grepproc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;canonproc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;canon-gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--outfile=locus.mrnas.gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pmrnaproc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;canonproc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If needed, it is trivial to capture the terminal output like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;grepproc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grep&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;intron&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loci.gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pmrnaproc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pmrna&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--locus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--accession&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--map=map.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grepproc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;canonproc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;canon-gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--outfile=locus.mrnas.gff3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pmrnaproc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canonproc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# process the terminal warnings&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Coda&lt;/h2&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;Python's &lt;code&gt;subprocess&lt;/code&gt; module is pretty powerful, and allows even slicker interactions with the shell, such as printing text to a pipeline of shell commands.
However, writing to and reading from a pipeline simultaneously can get tricky and is prone to deadlocks.
I will not cover this here, but the Internet is full of blog posts and StackOverflow threads discussing the intricacies of the &lt;code&gt;subprocess&lt;/code&gt; for these more complicated use cases.&lt;/p&gt;</summary><category term="shell"></category><category term="python"></category></entry><entry><title>Filter stderr while piping in UNIX</title><link href="https://standage.github.io/filter-stderr-while-piping-in-unix.html" rel="alternate"></link><published>2015-12-14T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2015-12-14:filter-stderr-while-piping-in-unix.html</id><summary type="html">&lt;p&gt;I've written before about &lt;a href="https://biowize.wordpress.com/2013/10/11/commands-in-place-of-program-arguments/"&gt;process substitutions in the shell&lt;/a&gt;.
This has become a core technique I use almost on a daily basis in my data work in the shell.
It has many uses, but I want to highlight a particular one here.&lt;/p&gt;
&lt;h2&gt;Use case&lt;/h2&gt;
&lt;p&gt;Imagine you have a shell script with the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;first_command --arg1&lt;span class="o"&gt;=&lt;/span&gt;foo --arg2&lt;span class="o"&gt;=&lt;/span&gt;bar --flag3 infile.txt &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; second_command one two three &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; third_command --abc xyz &lt;span class="se"&gt;\&lt;/span&gt;
    &amp;gt; outfile.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each of these commands will print to stderr in case of a warning or an error.
However, &lt;code&gt;second_command&lt;/code&gt; prints an irrelevant warning (&lt;code&gt;cannot find "foo"&lt;/code&gt;) message over and over again, filling up the terminal with thousands of lines of noise and making it more difficult to find warnings or error messages we might actually care about.
How can we filter the stderr of &lt;code&gt;second_command&lt;/code&gt; so that the &lt;code&gt;cannot find "foo"&lt;/code&gt; messages are ignored, but all other messages still show up?&lt;/p&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Process substitutions can be used not only as pseudo input files using the &lt;code&gt;&amp;lt;()&lt;/code&gt; syntax, but also as pseudo output files using the &lt;code&gt;&amp;gt;()&lt;/code&gt; syntax.
If we redirect a program's output to a process, we can then filter the data within that process, like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;some_program &amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;sort &lt;span class="p"&gt;|&lt;/span&gt; uniq -c&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Extending this to stderr requires only two changes.
First, we replace &lt;code&gt;&amp;gt;&lt;/code&gt; with &lt;code&gt;2&amp;gt;&lt;/code&gt; so that we are redirecting the correct output stream.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;some_program 2&amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;sort &lt;span class="p"&gt;|&lt;/span&gt; uniq -c&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Secondly, we add &lt;code&gt;1&amp;gt;&amp;amp;2&lt;/code&gt; to the end of the process so that its stdout is redirected back to stderr, which is where the data was intended to go in the first place (cue Ghostbusters quote about not crossing the streams).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;some_program 2&amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;sort &lt;span class="p"&gt;|&lt;/span&gt; uniq -c 1&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Putting this all together and going back to our original use case, we can remove the unwanted &lt;code&gt;cannot find "foo"&lt;/code&gt; messages from our terminal like so.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;first_command --arg1&lt;span class="o"&gt;=&lt;/span&gt;foo --arg2&lt;span class="o"&gt;=&lt;/span&gt;bar --flag3 infile.txt &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; second_command one two three 2&amp;gt; &amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;grep &lt;span class="s1"&gt;&amp;#39;cannot find &amp;quot;foo&amp;quot;&amp;#39;&lt;/span&gt; 1&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; third_command --abc xyz &lt;span class="se"&gt;\&lt;/span&gt;
    &amp;gt; outfile.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it!&lt;/p&gt;</summary><category term="shell"></category></entry><entry><title>Consortium authors in EndNote</title><link href="https://standage.github.io/consortium-authors-in-endnote.html" rel="alternate"></link><published>2015-11-21T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2015-11-21:consortium-authors-in-endnote.html</id><summary type="html">&lt;p&gt;Today I was reformatting a manuscript and changing from a numbered citation style to an author/date citation style.
In doing so, I found some issues with my EndNote references library that had gone unnoticed before since they were tucked away in the reference list.
One of the issues involved citation of a paper with a single consortium author, designated in the library as &lt;strong&gt;Honeybee_Genome_Sequencing_Consortium&lt;/strong&gt;.
I wasn't clear why it was formatted this way until I tried to fix the author field, and the citation then became &lt;strong&gt;Consortium HGS&lt;/strong&gt;, as if this was a person's name.
Neither the underscores nor the initials were satisfactory, so I decided to see if the Internet's collective wisdom (i.e. Google) had any light to shed on the issue.&lt;/p&gt;
&lt;p&gt;It turns out that one way (the way?) to solve this issue is to type the consortium name as you want it to appear, and then append a comma at the end (in my case, &lt;strong&gt;Honeybee Genome Sequencing Consortium,&lt;/strong&gt;).
This tricks EndNote into thinking this is a surname, and thus it does not attempt to initialize the name.
Perhaps there's a cleaner way, but this worked for me!&lt;/p&gt;
&lt;p&gt;Hat tip to the University of Warwick for &lt;a href="http://blogs.warwick.ac.uk/endnoteweb/entry/entering_names_of/"&gt;this blog post&lt;/a&gt;!&lt;/p&gt;</summary><category term="endnote"></category><category term="formatting"></category></entry><entry><title>New lab notebook setup: my motivation</title><link href="https://standage.github.io/new-lab-notebook-setup-my-motivation.html" rel="alternate"></link><published>2015-11-17T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2015-11-17:new-lab-notebook-setup-my-motivation.html</id><summary type="html">&lt;p&gt;My first research blog was a self-hosted Wordpress blog run from an Ubuntu server in our lab.
I was initially enamored by the supposed control and flexibility this gave me, but when I changed institutions a year or so later I was not quite as enamored with the work that went into migrating the content, nor the time I spent in sysadmin troubleshooting (I hate SELinux with a passion).
During that time I had also become familiar with the disheartening statistics on the half-life of links to academic department/lab websites.
I so decided that in the long run it would be more sustainable for me to let someone else handle the hosting concerns, so I could focus just on the content.
Version 2 of my blog was (well, is) &lt;a href="http://biowize.wordpress.com"&gt;hosted at Wordpress.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've continued posting content to the blog over the last couple of years—though not as frequently as I would like—but recently I've become increasingly dissatisfied.
I found myself saving electronic "scribbles" in Evernote or my wiki (also self-hosted on a server in our lab) and IPython/Jupyter notebooks in GitHub gists, saving the blog for when I really wanted to stretch my writing legs and produce some polished, contextualized thoughts.
But with notes and code and blog posts scattered all over the place, my setup felt harried and scrambled.
I need a more organized and streamlined solution.&lt;/p&gt;
&lt;p&gt;In working out the setup for this notebook, I have the following considerations in mind.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;One-stop shop&lt;/strong&gt;. With the exception of my software engineering work (which benefits immensely from the development workflow provided by git and GitHub), I want to be able to store all of my notes, scribbles, code snippets, Jupyter notebooks, and blog posts in one convenient location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown support&lt;/strong&gt;. I was never a fan of web-based WYSIWYG text editors, and so I've been writing all of my blog content in raw HTML.
  It's a travesty that this is still happening in 2015.
  I would much prefer to format my content with Markdown.
  (Ironically, I just learned recently that Wordpress.com now has integrated support for Markdown, so this would make a poor excuse if it was my only reason for changing.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedded JavaScript&lt;/strong&gt;. Wordpress.com does not allow users to embed &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in blog posts.
  "Shortcodes" are available for embedding content from a variety of popular media sources (Youtube, GitHub gist, and Twitter, for example), but you're out of luck if you want to embed video or other rich content from a different source (such as an &lt;a href="https://asciinema.org/"&gt;asciicast&lt;/a&gt;).
  Support for embedded JavaScript is high on my priority list for this new setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control and accessibility&lt;/strong&gt;. The first self-hosted version of the blog gave me the illusion of control and accessibility with respect to content, but really I was stuck to the web authoring interface (behind the scenes it was raw HTML stored in a MySQL database, and I wanted nothing to do with that bidness).
  The second version of my blog relieved me of the tedium of hosting, but only by relinquishing even more accessibility and control over my content.
  For my new setup, I would like the ability to write my content in vim or Komodo Edit; to search the content with shell tools or with custom Python scripts; to set up automated backup procedures using cron.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Taking all this into account, it's pretty clear that I need a solution based on a &lt;a href="https://wiki.python.org/moin/StaticSiteGenerator"&gt;static site generator&lt;/a&gt;.&lt;/p&gt;</summary><category term="meta"></category></entry><entry><title>Hello, world!</title><link href="https://standage.github.io/hello-world.html" rel="alternate"></link><published>2015-11-16T00:00:00-05:00</published><author><name>Daniel S. Standage</name></author><id>tag:standage.github.io,2015-11-16:hello-world.html</id><summary type="html">&lt;p&gt;Seed content for my new notebook.&lt;/p&gt;</summary><category term="meta"></category></entry></feed>